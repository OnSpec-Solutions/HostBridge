name: Windows Build, Test, and Pack

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build_test_pack:
    name: Build (Release), Test (Debug), Pack
    runs-on: windows-latest
    timeout-minutes: 60
    env:
      DOTNET_NOLOGO: true
      NUGET_PACKAGES: ${{ github.workspace }}\.nuget\packages
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET SDK (8.x)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ${{ env.NUGET_PACKAGES }}
          key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.lock.json', '**/*.csproj', 'Directory.Packages.props') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      - name: Restore (solution)
        run: dotnet restore .\HostBridge.sln

      - name: Build src (Release, signed)
        shell: pwsh
        run: |
          Get-ChildItem .\src -Recurse -Filter *.csproj | ForEach-Object {
            Write-Host "Building $($_.FullName)"
            dotnet build $_.FullName -c Release --no-restore
          }

      - name: Test (Debug) - all test projects
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $projects = Get-ChildItem .\tests -Recurse -Filter *.csproj | ForEach-Object { $_.FullName }
          foreach ($p in $projects) {
            Write-Host "Testing $p"
            dotnet test $p -c Debug --logger "trx;LogFileName=$(Split-Path -LeafBase $p).trx"
          }
        # Note: Debug tests ensure InternalsVisibleTo and test-only hooks are available without strong-name public key.

      - name: Pack src (Release)
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path .\artifacts\nuget | Out-Null
          Get-ChildItem .\src -Recurse -Filter *.csproj | ForEach-Object {
            Write-Host "Packing $($_.FullName)"
            dotnet pack $_.FullName -c Release --no-build -o .\artifacts\nuget
          }

      - name: Upload NuGet artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: artifacts/nuget/*.nupkg

  publish:
    name: Publish to NuGet.org
    runs-on: windows-latest
    needs: build_test_pack
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: artifacts/nuget

      - name: Setup .NET SDK (8.x)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Push packages to NuGet.org
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        shell: pwsh
        run: |
          if (-not $env:NUGET_API_KEY) { throw 'Missing NUGET_API_KEY secret' }
          Get-ChildItem .\artifacts\nuget -Filter *.nupkg | ForEach-Object {
            Write-Host "Pushing $($_.Name)"
            dotnet nuget push $_.FullName --api-key $env:NUGET_API_KEY --source https://api.nuget.org/v3/index.json --skip-duplicate
          }
